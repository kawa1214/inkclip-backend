// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bookmark-manager/bookmark-manager/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/bookmark-manager/bookmark-manager/db/sqlc"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateNote mocks base method.
func (m *MockStore) CreateNote(arg0 context.Context, arg1 db.CreateNoteParams) (db.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNote", arg0, arg1)
	ret0, _ := ret[0].(db.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNote indicates an expected call of CreateNote.
func (mr *MockStoreMockRecorder) CreateNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNote", reflect.TypeOf((*MockStore)(nil).CreateNote), arg0, arg1)
}

// CreateNoteWeb mocks base method.
func (m *MockStore) CreateNoteWeb(arg0 context.Context, arg1 db.CreateNoteWebParams) (db.NoteWeb, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNoteWeb", arg0, arg1)
	ret0, _ := ret[0].(db.NoteWeb)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNoteWeb indicates an expected call of CreateNoteWeb.
func (mr *MockStoreMockRecorder) CreateNoteWeb(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNoteWeb", reflect.TypeOf((*MockStore)(nil).CreateNoteWeb), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateWeb mocks base method.
func (m *MockStore) CreateWeb(arg0 context.Context, arg1 db.CreateWebParams) (db.Web, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWeb", arg0, arg1)
	ret0, _ := ret[0].(db.Web)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWeb indicates an expected call of CreateWeb.
func (mr *MockStoreMockRecorder) CreateWeb(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWeb", reflect.TypeOf((*MockStore)(nil).CreateWeb), arg0, arg1)
}

// DeleteNote mocks base method.
func (m *MockStore) DeleteNote(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNote", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNote indicates an expected call of DeleteNote.
func (mr *MockStoreMockRecorder) DeleteNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNote", reflect.TypeOf((*MockStore)(nil).DeleteNote), arg0, arg1)
}

// DeleteNoteWeb mocks base method.
func (m *MockStore) DeleteNoteWeb(arg0 context.Context, arg1 db.DeleteNoteWebParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNoteWeb", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNoteWeb indicates an expected call of DeleteNoteWeb.
func (mr *MockStoreMockRecorder) DeleteNoteWeb(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNoteWeb", reflect.TypeOf((*MockStore)(nil).DeleteNoteWeb), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// DeleteWeb mocks base method.
func (m *MockStore) DeleteWeb(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWeb", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWeb indicates an expected call of DeleteWeb.
func (mr *MockStoreMockRecorder) DeleteWeb(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWeb", reflect.TypeOf((*MockStore)(nil).DeleteWeb), arg0, arg1)
}

// GetNote mocks base method.
func (m *MockStore) GetNote(arg0 context.Context, arg1 uuid.UUID) (db.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNote", arg0, arg1)
	ret0, _ := ret[0].(db.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNote indicates an expected call of GetNote.
func (mr *MockStoreMockRecorder) GetNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNote", reflect.TypeOf((*MockStore)(nil).GetNote), arg0, arg1)
}

// GetNoteWeb mocks base method.
func (m *MockStore) GetNoteWeb(arg0 context.Context, arg1 db.GetNoteWebParams) (db.NoteWeb, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNoteWeb", arg0, arg1)
	ret0, _ := ret[0].(db.NoteWeb)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNoteWeb indicates an expected call of GetNoteWeb.
func (mr *MockStoreMockRecorder) GetNoteWeb(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNoteWeb", reflect.TypeOf((*MockStore)(nil).GetNoteWeb), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 uuid.UUID) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), arg0, arg1)
}

// GetWeb mocks base method.
func (m *MockStore) GetWeb(arg0 context.Context, arg1 uuid.UUID) (db.Web, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeb", arg0, arg1)
	ret0, _ := ret[0].(db.Web)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeb indicates an expected call of GetWeb.
func (mr *MockStoreMockRecorder) GetWeb(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeb", reflect.TypeOf((*MockStore)(nil).GetWeb), arg0, arg1)
}

// ListNoteWebsByNoteId mocks base method.
func (m *MockStore) ListNoteWebsByNoteId(arg0 context.Context, arg1 uuid.UUID) ([]db.NoteWeb, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNoteWebsByNoteId", arg0, arg1)
	ret0, _ := ret[0].([]db.NoteWeb)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNoteWebsByNoteId indicates an expected call of ListNoteWebsByNoteId.
func (mr *MockStoreMockRecorder) ListNoteWebsByNoteId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNoteWebsByNoteId", reflect.TypeOf((*MockStore)(nil).ListNoteWebsByNoteId), arg0, arg1)
}

// ListNotesByUserId mocks base method.
func (m *MockStore) ListNotesByUserId(arg0 context.Context, arg1 db.ListNotesByUserIdParams) ([]db.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotesByUserId", arg0, arg1)
	ret0, _ := ret[0].([]db.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotesByUserId indicates an expected call of ListNotesByUserId.
func (mr *MockStoreMockRecorder) ListNotesByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotesByUserId", reflect.TypeOf((*MockStore)(nil).ListNotesByUserId), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockStore) ListUsers(arg0 context.Context, arg1 db.ListUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStoreMockRecorder) ListUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStore)(nil).ListUsers), arg0, arg1)
}

// ListWebsByUserId mocks base method.
func (m *MockStore) ListWebsByUserId(arg0 context.Context, arg1 db.ListWebsByUserIdParams) ([]db.Web, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWebsByUserId", arg0, arg1)
	ret0, _ := ret[0].([]db.Web)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWebsByUserId indicates an expected call of ListWebsByUserId.
func (mr *MockStoreMockRecorder) ListWebsByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWebsByUserId", reflect.TypeOf((*MockStore)(nil).ListWebsByUserId), arg0, arg1)
}

// UpdateNote mocks base method.
func (m *MockStore) UpdateNote(arg0 context.Context, arg1 db.UpdateNoteParams) (db.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNote", arg0, arg1)
	ret0, _ := ret[0].(db.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNote indicates an expected call of UpdateNote.
func (mr *MockStoreMockRecorder) UpdateNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*MockStore)(nil).UpdateNote), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}
