// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: web.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createWeb = `-- name: CreateWeb :one
INSERT INTO webs (
  user_id,
  url,
  title,
  thumbnail_url,
  html
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, user_id, url, title, thumbnail_url, html, created_at
`

type CreateWebParams struct {
	UserID       uuid.UUID `json:"user_id"`
	Url          string    `json:"url"`
	Title        string    `json:"title"`
	ThumbnailUrl string    `json:"thumbnail_url"`
	Html         string    `json:"html"`
}

func (q *Queries) CreateWeb(ctx context.Context, arg CreateWebParams) (Web, error) {
	row := q.db.QueryRowContext(ctx, createWeb,
		arg.UserID,
		arg.Url,
		arg.Title,
		arg.ThumbnailUrl,
		arg.Html,
	)
	var i Web
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Url,
		&i.Title,
		&i.ThumbnailUrl,
		&i.Html,
		&i.CreatedAt,
	)
	return i, err
}

const deleteWeb = `-- name: DeleteWeb :exec
DELETE FROM webs
WHERE id = $1
`

func (q *Queries) DeleteWeb(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteWeb, id)
	return err
}

const getWeb = `-- name: GetWeb :one
SELECT id, user_id, url, title, thumbnail_url, html, created_at FROM webs
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWeb(ctx context.Context, id uuid.UUID) (Web, error) {
	row := q.db.QueryRowContext(ctx, getWeb, id)
	var i Web
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Url,
		&i.Title,
		&i.ThumbnailUrl,
		&i.Html,
		&i.CreatedAt,
	)
	return i, err
}

const listWebByNoteId = `-- name: ListWebByNoteId :many
SELECT webs.id, webs.user_id, webs.url, webs.title, webs.thumbnail_url, webs.html, webs.created_at FROM webs
INNER JOIN note_webs ON webs.id = note_webs.web_id
WHERE note_webs.note_id = $1
`

func (q *Queries) ListWebByNoteId(ctx context.Context, noteID uuid.UUID) ([]Web, error) {
	rows, err := q.db.QueryContext(ctx, listWebByNoteId, noteID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Web{}
	for rows.Next() {
		var i Web
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Url,
			&i.Title,
			&i.ThumbnailUrl,
			&i.Html,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWebByNoteIds = `-- name: ListWebByNoteIds :many
SELECT webs.id, webs.user_id, webs.url, webs.title, webs.thumbnail_url, webs.html, webs.created_at, note_webs.note_id FROM webs
INNER JOIN note_webs ON webs.id = note_webs.web_id
WHERE note_webs.note_id = ANY($1::uuid[])
`

type ListWebByNoteIdsRow struct {
	ID           uuid.UUID `json:"id"`
	UserID       uuid.UUID `json:"user_id"`
	Url          string    `json:"url"`
	Title        string    `json:"title"`
	ThumbnailUrl string    `json:"thumbnail_url"`
	Html         string    `json:"html"`
	CreatedAt    time.Time `json:"created_at"`
	NoteID       uuid.UUID `json:"note_id"`
}

func (q *Queries) ListWebByNoteIds(ctx context.Context, ids []uuid.UUID) ([]ListWebByNoteIdsRow, error) {
	rows, err := q.db.QueryContext(ctx, listWebByNoteIds, pq.Array(ids))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListWebByNoteIdsRow{}
	for rows.Next() {
		var i ListWebByNoteIdsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Url,
			&i.Title,
			&i.ThumbnailUrl,
			&i.Html,
			&i.CreatedAt,
			&i.NoteID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWebsByUserId = `-- name: ListWebsByUserId :many
SELECT id, user_id, url, title, thumbnail_url, html, created_at FROM webs
WHERE user_id = $1
LIMIT $2
OFFSET $3
`

type ListWebsByUserIdParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListWebsByUserId(ctx context.Context, arg ListWebsByUserIdParams) ([]Web, error) {
	rows, err := q.db.QueryContext(ctx, listWebsByUserId, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Web{}
	for rows.Next() {
		var i Web
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Url,
			&i.Title,
			&i.ThumbnailUrl,
			&i.Html,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
