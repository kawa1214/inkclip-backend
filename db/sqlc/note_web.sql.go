// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: note_web.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createNoteWeb = `-- name: CreateNoteWeb :one
INSERT INTO note_webs (
  note_id,
  web_id
) VALUES (
  $1, $2
)
RETURNING note_id, web_id
`

type CreateNoteWebParams struct {
	NoteID uuid.UUID `json:"note_id"`
	WebID  uuid.UUID `json:"web_id"`
}

func (q *Queries) CreateNoteWeb(ctx context.Context, arg CreateNoteWebParams) (NoteWeb, error) {
	row := q.db.QueryRowContext(ctx, createNoteWeb, arg.NoteID, arg.WebID)
	var i NoteWeb
	err := row.Scan(&i.NoteID, &i.WebID)
	return i, err
}

const deleteNoteWeb = `-- name: DeleteNoteWeb :exec
DELETE FROM note_webs
WHERE note_id = $1 AND web_id = $2
`

type DeleteNoteWebParams struct {
	NoteID uuid.UUID `json:"note_id"`
	WebID  uuid.UUID `json:"web_id"`
}

func (q *Queries) DeleteNoteWeb(ctx context.Context, arg DeleteNoteWebParams) error {
	_, err := q.db.ExecContext(ctx, deleteNoteWeb, arg.NoteID, arg.WebID)
	return err
}

const deleteNoteWebsByNoteId = `-- name: DeleteNoteWebsByNoteId :exec
DELETE FROM note_webs
WHERE note_id = $1
`

func (q *Queries) DeleteNoteWebsByNoteId(ctx context.Context, noteID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteNoteWebsByNoteId, noteID)
	return err
}

const getNoteWeb = `-- name: GetNoteWeb :one
SELECT note_id, web_id FROM note_webs
WHERE note_id = $1 AND web_id = $2 LIMIT 1
`

type GetNoteWebParams struct {
	NoteID uuid.UUID `json:"note_id"`
	WebID  uuid.UUID `json:"web_id"`
}

func (q *Queries) GetNoteWeb(ctx context.Context, arg GetNoteWebParams) (NoteWeb, error) {
	row := q.db.QueryRowContext(ctx, getNoteWeb, arg.NoteID, arg.WebID)
	var i NoteWeb
	err := row.Scan(&i.NoteID, &i.WebID)
	return i, err
}

const listNoteWebsByNoteId = `-- name: ListNoteWebsByNoteId :many
SELECT note_id, web_id FROM note_webs
WHERE note_id = $1
`

func (q *Queries) ListNoteWebsByNoteId(ctx context.Context, noteID uuid.UUID) ([]NoteWeb, error) {
	rows, err := q.db.QueryContext(ctx, listNoteWebsByNoteId, noteID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []NoteWeb{}
	for rows.Next() {
		var i NoteWeb
		if err := rows.Scan(&i.NoteID, &i.WebID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
